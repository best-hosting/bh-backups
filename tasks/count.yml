---

- block:
    - name: count | Stat file count cache
      stat:
        path: "{{ item }}"
      register: r_cache_stats_list
      loop:
        - 'r_files_count_cache_file'
        - 'r_size_cache_file'
        - 'r_scripts_files_count_cache_file'
        - 'r_scripts_size_cache_file'
    - name: count | Rebuild cache stats to dictionary
      set_fact:
        r_cache_stats: >-
          {{ r_cache_stats_list.results | items2dict(key_name='item', value_name='stat') }}

    - name: count | Load file count cache
      include_vars:
        file: "{{ r_files_count_cache_file }}"
        name: r_files_count_cache
      when: r_cache_stats['r_files_count_cache_file'].exists

    - name: count | Load size cache
      include_vars:
        file: "{{ r_size_cache_file }}"
        name: r_size_cache
      when: r_cache_stats['r_size_cache_file'].exists

      #    - name: count | Load scripts file count cache
      #      include_vars:
      #        file: "{{ r_scripts_files_count_cache }}"
      #        name: r_scripts_files_count_cache
      #      when: r_cache_stats['r_scripts_files_count_cache'].exists
      #
      #    - name: count | Load scripts size cache
      #      include_vars:
      #        file: "{{ r_scripts_size_cache }}"
      #        name: r_scripts_size_cache
      #      when: r_cache_stats['r_scripts_size_cache'].exists

    - name: count | Loaded file count cache
      debug:
        var: r_files_count_cache
  tags:
    - count_files_cache

- block:
    - name: count | Stat backup points
      stat:
        path: "{{ r_snapshot_root + '/' + item }}"
      loop: >-
        {{  ( ['daily']   | product([0, 1, 2])  | list
            + ['weekly']  | product([0])           | list
            + ['monthly'] | product([0])           | list
            ) | map('join', '.') | list
        }}
      register: r_interval_stats_list
      delegate_to: "{{ backup_server }}"

    - name: Rebuild to dict
      set_fact:
        r_interval_stats: >-
          {{ r_interval_stats_list.results | items2dict(key_name='item', value_name='stat') }}

    - name: count | Huy
      debug:
        var: r_interval_stats

    - name: count | Determine count interval
      set_fact:
        r_count_interval: >-
          {{ 'daily.1' if r_interval_stats['daily.1'].exists
                else 'daily.0' if r_interval_stats['daily.0'].exists
                else '.sync' if r_interval_stats['sync'].exists
                else 'huy'
          }}

  when: r_count_files

- block:
    # If destination does not exist, file count will be 0.
    - name: count | Count files in backups
      shell: >-
        {{ '/usr/bin/find '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.dst ) | quote
              + '| wc -l' }}
      when: r_files_count_cache[item.name] is not defined
      register: r_files_count_raw
      loop: "{{ r_backups }}"
      #changed_when: false

    - name: count | Count size of backups
      command: >-
        {{  '/usr/bin/du -s -b '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.dst ) | quote
        }}
      register: r_size_raw
      loop: "{{ r_backups }}"
      #changed_when: false

  delegate_to: "{{ backup_server }}"
  when: r_count_files

- block:
    - name: count | Rebuild
      set_fact:
        r_files_count: >-
          {{ r_files_count | combine(
                { item.0.name :
                    { 'file_count' : r_files_count_cache[item.0.name] | default(item.1.stdout) | int
                    }
                })
          }}
        r_size: >-
          {{ r_size | combine(
                { item.0.name :
                    { 'size'  : r_size_cache[item.0.name] | default(item.2.stdout)
                                  | regex_search('^[0-9]+(?=\t)') | int
                    }
                })
          }}
      loop: >-
        {{ r_backups | zip(r_files_count_raw.results, r_size_raw.results) | list }}

    - name: Pizda
      debug:
        var: r_files_count
    - name: Pizda2
      debug:
        var: r_size


- block:
    - name: count | Count files in backup scripts dirs
      shell: >-
        {{ '/usr/bin/find '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.name ) | quote
              + '| wc -l' }}
      register: r_backup_scripts_files_count
      delegate_to: "{{ backup_server }}"
      loop: "{{ r_backup_scripts }}"
      changed_when: false

    - name: count | Count size of backup scripts dirs
      command: >-
        {{  '/usr/bin/du -s -b '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.name ) | quote
        }}
      register: r_backup_scripts_size
      delegate_to: "{{ backup_server }}"
      loop: "{{ r_backup_scripts }}"
      changed_when: false

  when: r_count_files

- block:
    - name: count | Ensure directory for caching rsnapshot file count data exist
      file:
        mode: '0700'
        path:  "{{ r_cache_dir }}"
        state: directory
    - name: count | Save rsnapshot file count to local db
      copy:
        content:  "{{ r_files_count | to_yaml }}"
        dest:     "{{ r_files_count_cache_file }}"

  delegate_to: localhost

