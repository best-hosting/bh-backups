---

- block:
    - name: count | Stat backup points
      stat:
        path: "{{ r_snapshot_root + '/' + item }}"
      loop: >-
        {{  ( ['daily']   | product([0, 1, 2])  | list
            + ['weekly']  | product([0])           | list
            + ['monthly'] | product([0])           | list
            ) | map('join', '.') | list
        }}
      register: r_interval_stats_list
      delegate_to: "{{ backup_server }}"

    - name: Rebuild to dict
      set_fact:
        r_interval_stats: "{{ r_interval_stats_list.results | items2dict(key_name='item', value_name='stat') }}"

    - name: count | Huy
      debug:
        var: r_interval_stats

    - name: count | Determine count interval
      set_fact:
        r_count_interval: >-
          {{ 'daily.1' if r_interval_stats['daily.1'].exists
                else 'daily.0' if r_interval_stats['daily.0'].exists
                else '.sync' if r_interval_stats['sync'].exists
                else 'huy'
          }}
    - name: count | Huynya
      debug:
        var: r_count_interval

- block:
    # If destination does not exist, file count will be 0.
    - name: count | Count files in backups
      shell: >-
        {{ '/usr/bin/find '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.dst ) | quote
              + '| wc -l' }}
      register: r_backups_file_count
      delegate_to: "{{ backup_server }}"
      loop: "{{ r_backups }}"
      changed_when: false

    - name: count | Count size of backups
      command: >-
        {{  '/usr/bin/du -s -b '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.dst ) | quote
        }}
      register: r_backups_size
      delegate_to: "{{ backup_server }}"
      loop: "{{ r_backups }}"
      changed_when: false

- block:
    - name: count | Count files in backup scripts dirs
      shell: >-
        {{ '/usr/bin/find '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.name ) | quote
              + '| wc -l' }}
      register: r_backup_scripts_file_count
      delegate_to: "{{ backup_server }}"
      loop: "{{ r_backup_scripts }}"
      changed_when: false

    - name: count | Count size of backup scripts dirs
      command: >-
        {{  '/usr/bin/du -s -b '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.name ) | quote
        }}
      register: r_backup_scripts_size
      delegate_to: "{{ backup_server }}"
      loop: "{{ r_backup_scripts }}"
      changed_when: false

