---
# (backup server) Where to install rsnapshot configs.
install_path: '/etc'

# (backup server) Root directory for all (not this particular host) backups.
#r_backup_root: '/var/cache/rsnapshot'

# Backup points definition.
# 'src' - (required) name of source directory on backed up server.
# 'dst' - (required) name of destination directory (under 'r_snapshot_root')
# for this backup point on _backup_ server.
# 'name' - (required, but has default) id, which will be used to identify this
# backup point and all related resources. Ids should be unique among _both_
# backup points and backup scripts. If not specified, it'll be derived
# automatically from 'dst'.
# 'rsync_filter_name' - (optional) name of default rsync filter to use.
# 'rsync_filter' - (optional) path to rsync filter file. If not specified,
# default rsync filter with name 'rsync_filter_name' will be looked up. If
# 'rsync_filter_name' is also not specified, default rsync filter will be
# looked up by backup point 'name'. And if that also fails, task fails.
#
# All other attributes are ignored.
#
#r_backups: []

# Default rsync filters, which may be referenced by name in
# 'rsync_filter_name' field of 'r_backups'.
default_rsync_filters: >-
  {{
      { 'root': role_path + '/' + 'templates/default_root_rsync_filter.yml'
      , 'home': role_path + '/' + 'templates/default_home_rsync_filter.yml'
      }
  }}

# Backup scripts definition.
# 'dst' - (required) name of destination directory (under 'r_snapshot_root')
# for this script on _backup_ server.
# 'name' - (required, but has default) id, which will be used to identify this
# backup script and all related resources. This 'name' prefixed with 'host_id'
# (normalized 'inventory_hostname') will also be used as ssh 'Host' added to
# '.ssh/config' on backup server for this particular script. So it's _assumed
# and hardcoded_, that each script will connect to ssh host with name of
# 'ssh_host' field of '_backup_scripts' internal dictionary (shown after
# define stage).  Ids should be unique among _both_ backup points and backup
# scripts.  If not specified, it'll be derived automatically from 'dst'.
# 'script_name' - (optional) name of default backup script to use.
# 'script' - (optional) path to backup script file. If not specified, default
# backup script with name 'script_name' will be looked up. If 'script_name' is
# also not specified, default backup script will be looked up by backup script
# 'name'. And if that also fails, task fails.
#
# All other attributes are ignored.
#
#r_backup_scripts: []

# Default backup scripts, which may be referenced by name in 'script_name'
# field of 'r_backup_scripts'.
default_backup_scripts: >-
  {{
      { 'mysql': role_path + '/' + 'files/mysql.sh'
      , 'pgsql': role_path + '/' + 'files/pgsql.sh'
      }
  }}

# Database user name, which backup server will use to backup db.
db_user: "{{ backup_server }}"

# Database user password.
db_password: "{{ lookup('file', 'backup_mysql_' + inventory_hostname + '.password') }}"

r_sync:
  hour: 2
  minute: 30
r_weekly:
  hour: 2
  minute: 15
r_monthly:
  hour: 2
  minute: 0

# To recalculate values for backup point, remove it from cache file.
r_count_files: yes

# Percentage.
warn_files_count: 80
crit_files_count: 60
warn_files_count_diff: 10000
crit_files_count_diff: 40000

warn_size: 80
crit_size: 60
warn_size_diff: 10737418240
crit_size_diff: 42949672960

# FIXME: Rename to "role_name"+run_mode , because different roles may have
# this variable.
# Whether to install or uninstall rsnapshot configs. Note, that rsync filter
# library files, directories and all backup data will _not_ be uninstalled in
# any case.
run_mode: 'install'

# Local directory to store ssh public keys.
ssh_pubkeys_dir: "{{ playbook_dir + '/ssh_pubkeys' }}"
