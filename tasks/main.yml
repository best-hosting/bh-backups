---
# tasks file for bh-backups

- block:
  - name: backups | Install rsnapshot.conf
    template:
      src:  "rsnapshot.conf"
      dest: "{{ install_path + '/rsnapshot.' + inventory_hostname + '.conf' }}"
      backup: yes

  - name: backups | Ensure rsync filters directories exists
    file:
      dest:   "{{ item }}"
      owner:  root
      group:  root
      mode:   0755
      state:  directory
    loop:
      - "{{ rsync_filters_dir }}"
      - "{{ rsync_filters_libdir }}"
  - name: backups | Copy rsync filters library
    copy:
      src:    "{{ item }}"
      dest:   "{{ rsync_filters_libdir }}"
      force:  yes
      backup: yes
    with_fileglob:
      - "rsnapshot.d/lib/*"

  - name: backups | Copy default rsync filters
    template:
      src:    "{{ item }}"
      dest:   "{{ rsync_filters_dir }}"
      force:  yes
      backup: yes
    with_fileglob:
      - "templates/*.rsync-filter"

  - name: backups | Define per-host rsync filters list
    set_fact:
      backup_data_templates: >
        {{  [ { 'src' : 'templates/per_backup-rsync_filter'
              , 'dest': rsync_filters_dir + '/'
                        + inventory_hostname + '-' + item.name + '.rsync-filter'
              , 'r_name': item.name
              }
            ] + backup_data_templates }}
    loop: "{{ r_backups }}"

  - name: Huy
    debug:
      var: backup_data_templates

  - name: backups | Define rsync filters dictionary
    set_fact:
      r_backup_filters: >
        {{ r_backups | items2dict(key_name='name', value_name='rsync_filter') }}

  - name: Huy2
    debug:
      var: r_backups2

  - name: backups | Create data files
    include_role:
      name: sgf-restore
    vars:
      backup_dir: "{{ backup_root_dir + '/bh-backups' }}"
      default_data_templates: "{{ backup_data_templates }}"
      default_file_dest: 'huy'

  delegate_to: "{{ backup_server }}"
  when: inventory_hostname in groups['backups']

