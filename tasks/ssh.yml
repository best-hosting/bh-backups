---

# _backup server_ : Add Host-s to ssh config.
- block:
    # FIXME: ssh host name expected by backup script is hardcoded here.
    # Now it's expected to match with the name, which script will have on
    # backup server (after install).
    - name: ssh | Define ssh hostnames
      set_fact:
        r_ssh_hosts: >
          {{  [{ 'ssh_host':    item.install | basename | splitext | first
               , 'ssh_hostname': item.ssh_hostname | default(ansible_host)
              }] + r_ssh_hosts
          }}
      loop: "{{ r_backup_scripts2 }}"

    - name: ssh | Define ssh config content
      set_fact:
        r_ssh_hosts: |
          {% for h in r_ssh_hosts %}
            Host {{ h.ssh_host }}
              HostName {{ h.ssh_hostname }}
              User {{ ansible_user_id }}
          {% endfor %}

    - name: ssh | (backup_server) Add or remove host from ssh config
      blockinfile:
        block: "{{ r_ssh_hosts }}"
        state: >-
          {{ 'present' if run_mode != 'uninstall' else 'absent' }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK bh-backups of {{ host_id }}"
        owner:  "{{ backup_user }}"
        mode:   '0600'
        path: >-
          {{ backup_user_dir + '/.ssh/config' }}
        create: yes

  delegate_to: "{{ backup_server }}"
  tags:
    - 'rsnapshot_ssh_hosts'
    - 'rsnapshot_db'

# _localhost_ : Obtain ssh host pubkeys.
- block:
    - name: ssh | (local) Ensure ssh host public keys directory exists
      file:
        path: "{{ ssh_host_pubkeys_db_dir }}"
        state: directory
      delegate_to: localhost

    - name: ssh | Find ssh host public keys
      find:
        paths: '/etc/ssh'
        patterns: '^ssh_host_[^/]+_key\.pub$'
        use_regex:  true
        file_type:  'file'
      register: ssh_host_keys_found

    - name: ssh | (local) Obtain ssh host public keys
      synchronize:
        mode: pull
        archive: no
        checksum: yes
        recursive: yes
        delete: yes
        src: "{{ item.path }}"
        dest: "{{ ssh_host_pubkeys_db_dir }}"
      loop: "{{ ssh_host_keys_found.files }}"

  tags:
    - 'ssh_host_keys_db'

# _localhost_ : Parse saved ssh host keys on _localhost_.
- block:
    - name: ssh | (local) Find backup server ssh public keys
      find:
        paths:      "{{ ssh_pubkeys_backup_server_dir }}"
        patterns:   '^id_rsa.pub$'
        use_regex:  true
        file_type:  'file'
      register: ssh_pubkeys_backup_server_found

    - name: ssh | (local) Find ssh host public keys
      find:
        paths: "{{ ssh_host_pubkeys_db_dir }}"
        patterns: '^ssh_host_[^/]+_key\.pub$'
        use_regex:  true
        file_type:  'file'
      register: ssh_host_keys_local_db

    - name: ssh | Parse ssh host public keys
      set_fact:
        ssh_host_keys: >
          {{  [ dict( ['keytype', 'key', 'host']
                        | zip(lookup('file', item.path).split(' '))
                    )
              ] + ssh_host_keys }}
      loop: "{{ ssh_host_keys_local_db.files }}"

  delegate_to: localhost
  tags:
    - 'ssh_host_access'

- block:
    - name: ssh | (backup_server) Add host to backup server's known_hosts
      known_hosts:
        name: "{{ ansible_host }}"
        key:  "{{ ansible_host + ' ' + item.keytype + ' ' + item.key }}"
        hash_host: yes
      loop: "{{ ssh_host_keys }}"
      delegate_to: "{{ backup_server }}"

    - name: ssh | Add or remove backup server user from authorized_keys
      authorized_key:
        user:   "{{ ansible_user_id }}"
        state: >-
          {{ 'present' if run_mode != 'uninstall' else 'absent' }}
        key:    "{{ lookup('file', item.path) }}"
      loop: "{{ ssh_pubkeys_backup_server_found.files }}"
  tags:
    - 'ssh_host_access'

