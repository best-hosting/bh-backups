---

- block:
    - name: rsnapshot | Add rsnapshot.conf to templates list
      set_fact:
        r_data_templates: >
          {{  [ { 'src'   : role_path + '/templates/rsnapshot.conf'
                , 'dest'  : rsnapshot_conf
                , 'mode'  : '0755'
                , 'force' : true
                }
              ] + r_data_templates }}

  tags:
    - 'rsnapshot_config'
    - 'rsnapshot_db'

- block:
    - name: rsnapshot | Add rsync filter files to templates list
      set_fact:
        r_data_templates: >
          {{  [ { 'src' : role_path + '/templates/per_backup-rsync_filter'
                , 'dest': rsync_filters_dir + '/'
                            + host_id + '-' + item.name + '.rsync-filter'
                , 'r_name': item.name
                , 'force' : true
                }
              ] + r_data_templates }}
      loop: "{{ _backup_points }}"

    - name: rsnapshot | Define dictionary used in rsync filter template
      set_fact:
        r_backup_filters: >
          {{ _backup_points | items2dict(key_name='name', value_name='rsync_filter') }}

  tags:
    - 'rsnapshot_filters'

- block:
    - name: rsnapshot | Ensure snapshot root directory exists
      file:
        mode: '0700'
        owner: 'root'
        group: 'root'
        path:  "{{ r_snapshot_root }}"
        state: directory
      tags:
        - 'rsnapshot_config'
        - 'rsnapshot_filters'
        - 'rsnapshot_db'

    - name: rsnapshot | Ensure rsync filters directories exist
      file:
        dest:   "{{ item }}"
        owner:  root
        group:  root
        mode:   0755
        state:  directory
      loop:
        - "{{ rsync_filters_dir }}"
        - "{{ rsync_filters_libdir }}"
      tags:
        - 'rsnapshot_filters'
        - 'rsnapshot_db'

    - name: rsnapshot | Copy rsync filters library files
      copy:
        src:    "{{ item }}"
        dest:   "{{ rsync_filters_libdir }}"
        force:  yes
        backup: yes
      with_fileglob:
        - "rsnapshot.d/lib/*"
      tags:
        - 'rsnapshot_filters'

    - name: rsnapshot | Restore or create config files
      include_role:
        name: sgf-restore
        apply:
          tags:
            - always
      vars:
        backup_dir: "{{ backup_root_dir + '/bh-backups' }}"
        default_data_files: "{{ r_data_files }}"
        default_data_templates: "{{ r_data_templates }}"
        default_file_dest: 'huy'
      when: run_mode != 'uninstall'
      tags:
        - 'rsnapshot_config'
        - 'rsnapshot_filters'
        - 'rsnapshot_db'

    - name: rsnapshot | Or delete config files
      file:
        name: "{{ item['dest'] }}"
        state: absent
      loop: "{{ r_data_files + r_data_templates }}"
      when: run_mode == 'uninstall'
      tags:
        - 'rsnapshot_config'
        - 'rsnapshot_filters'
        - 'rsnapshot_db'

  delegate_to: "{{ backup_server }}"

- block:
    - name: rsnapshot | Set up cron tasks
      cron:
        name: "{{ host_id }} sync and daily"
        hour  : "{{ r_sync.hour }}"
        minute: "{{ r_sync.minute }}"

        job: >-
          /usr/bin/rsnapshot -c {{ rsnapshot_conf }} sync ;
          /usr/bin/rsnapshot -c {{ rsnapshot_conf }} daily
        state: present
        user: 'root'
        cron_file: "{{ rsnapshot_cron_file }}"

    - name: rsnapshot | weekly
      cron:
        name: "{{ host_id }} weekly"
        hour  : "{{ r_weekly.hour }}"
        minute: "{{ r_weekly.minute }}"
        weekday: "0"
        job: >-
          /usr/bin/rsnapshot -c {{ rsnapshot_conf }} weekly
        state: present
        user: 'root'
        cron_file: "{{ rsnapshot_cron_file }}"

    - name: rsnapshot | monthly
      cron:
        name: "{{ host_id }} monthly"
        hour  : "{{ r_monthly.hour }}"
        minute: "{{ r_monthly.minute }}"
        day: "1"
        job: >-
          /usr/bin/rsnapshot -c {{ rsnapshot_conf }} monthly
        state: present
        user: 'root'
        cron_file: "{{ rsnapshot_cron_file }}"

  when: run_mode != 'uninstall'
  delegate_to: "{{ backup_server }}"
  tags:
    - 'rsnapshot_cron'
    - 'rsnapshot_config'

- name: rsnapshot | Or delete cron files
  file:
    name: "{{ rsnapshot_cron_file }}"
    state: absent
  when: run_mode == 'uninstall'
  delegate_to: "{{ backup_server }}"
  tags:
    - 'rsnapshot_cron'
    - 'rsnapshot_config'
