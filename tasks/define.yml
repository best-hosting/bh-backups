---

# FIXME: Rename r_backups to backup_points.
- block:
    - name: define | Define internal r_backups dictionary
      set_fact:
        _backup_points: >-
          {{ _backup_points
              + [ { 'name'    : item_name
                  , 'dst': item.dst + '/'
                  , 'full_src':
                      ansible_user_id + '@' + host_id + ':'
                      + ( item.src if item.src == '/' else item.src + '/././' )
                  , 'rsync_filter' : item.rsync_filter | default(item_rsync_filter)
                  , 'install' : rsync_filters_dir + '/'
                                  + host_id + '-' + item_name + '.rsync-filter'
                  , 'ssh_host' : host_id
                  }
                ]
          }}
      vars:
        item_name: >-
          {{ item.name | default(item.dst | replace('/', '_')) }}
        item_rsync_filter: >-
          {{ item.rsync_filter if item.rsync_filter is defined
              else default_rsync_filters[item.rsync_filter_name]
                if item.rsync_filter_name is defined
                else default_rsync_filters[item_name]
          }}
      loop: "{{ r_backups }}"

    - name: define | Define internal r_backup_scripts dictionary
      set_fact:
        _backup_scripts: >-
          {{ _backup_scripts
              + [ { 'name'    : item_name
                  , 'dst'     : item_name
                  , 'script'  : item_script
                  , 'install' : rsync_filters_dir + '/'
                                  + host_id + '-' + item_name
                                  + item_script | splitext | last
                  , 'ssh_host' : host_id + '-' + item_name
                  }
                ]
          }}
      vars:
        item_name: >-
          {{ item.name | default(item.dst | replace('/', '_')) }}
        item_script: >-
          {{ item.script if item.script is defined
              else default_backup_scripts[item.script_name]
                if item.script_name is defined
                else default_backup_scripts[item_name]
          }}
      loop: "{{ r_backup_scripts }}"

    - name: define | Check, that all names are unique
      assert:
        that:
          - "{{ identical_names | length == 0 }}"
          - "{{ backup_point_duplicates | length == 0 }}"
          - "{{ backup_script_duplicates | length == 0 }}"
        fail_msg: |-
          All names of backup points _and_ backup scripts must be _unique_.
          {{ backup_point_duplicates }}
          {% if backup_point_duplicates | length > 0 %}
          Following duplicate names are found in backup points:
          {{ backup_point_duplicates }}
          {% endif %}
          {% if backup_script_duplicates | length > 0 %}
          Following duplicate names are found in backup scripts:
          {{ backup_script_duplicates }}
          {% endif %}
          {% if identical_names | length > 0 %}
          Following names are used both in backup points and backup scripts:
          {{ identical_names }}
          {% endif %}

      vars:
        backup_point_names: >-
          {{ _backup_points | map(attribute='name') }}
        backup_script_names: >-
          {{ _backup_scripts | map(attribute='name') }}
        identical_names: >-
          {{ backup_point_names | intersect(backup_script_names) }}
        backup_point_duplicates: >-
          {% for name, items in _backup_points | groupby('name') if items | length > 1 %}
          {{ "'" + items | map(attribute='name') | first + "'" }}
          {%- endfor %}
        backup_script_duplicates: >-
          {% for name, items in _backup_scripts | groupby('name') if items | length > 1 %}
          {{ "'" + items | map(attribute='name') | first + "'" }}
          {%- endfor %}

    - name: define | Show backup points
      debug:
        var: _backup_points
    - name: define | Show backup scripts
      debug:
        var: _backup_scripts

- block:
    - name: define | Define dictionary for default MySQL script
      set_fact:
        _backup_scripts_mysql: >-
          {{ _backup_scripts_mysql | combine(
              { item.0.name :
                  item.0 | combine(
                    { 'conf'         : role_path + '/templates/mysql.cnf'
                    , 'install_conf' : item.0.install | splitext | first + '.cnf'
                    , 'user'    : item_user
                    , 'password': lookup('password', item_pw_file + ' length=18 chars=ascii_letters,digits')
                    })
              })
          }}
      vars:
        item_user: >-
          {{ item.1.user | default(backup_server + '-' + item.0.name) }}
        item_pw_file: >-
          {{ 'passwords/' + inventory_hostname + '/mysql/' + item_user }}
      when: item.0.script == default_backup_scripts['mysql']
      loop: "{{ _backup_scripts | zip(r_backup_scripts) | list }}"

    - name: define | Define dictionary for default PostgreSQL script
      set_fact:
        _backup_scripts_pgsql: >-
          {{ _backup_scripts_pgsql | combine(
              { item.0.name :
                  item.0 | combine(
                    { 'conf'              : role_path + '/templates/pgsql.cnf'
                    , 'install_conf'      : item.0.install | splitext | first + '.cnf'
                    , 'passfile'          : role_path + '/templates/pgsql.pgpass'
                    , 'install_passfile'  : item.0.install | splitext | first + '.pgpass'
                    , 'user'    : item_user
                    , 'password': lookup('password', item_pw_file + ' length=18 chars=ascii_letters,digits')
                    })
              })
          }}
      vars:
        item_user: >-
          {{ item.1.user | default(backup_server + '-' + item.0.name) }}
        item_pw_file: >-
          {{ 'passwords/' + inventory_hostname + '/psql/' + item_user }}
      when: item.0.script == default_backup_scripts['pgsql']
      loop: "{{ _backup_scripts | zip(r_backup_scripts) | list }}"

    - name: define | Show MySQL backup scripts
      debug:
        var: _backup_scripts_mysql
    - name: define | Show PostgreSQL backup scripts
      debug:
        var: _backup_scripts_pgsql

# Save rsnapshot file count and size values to cache. I should save them here,
# because define tasks above enforce additional requirments on `r_backups` and
# `r_backup_scripts` dictionaries, thus they should run first to ensure
# correctness of saved data.
# E.g. if `dst` was undefined for backup point, incorrect file count and size
# may be computed, but define task above will fail and prevent that data to be
# written to cache.
#- block:
#    - name: count | Ensure directory for caching rsnapshot file count data exist
#      file:
#        mode: '0700'
#        path:  "{{ r_cache_dir }}"
#        state: directory
#
#    - name: count | Save file count locally
#      copy:
#        content:  "{{ r_files_count | to_yaml }}"
#        dest:     "{{ r_files_count_cache_file }}"
#
#    - name: count | Save size locally
#      copy:
#        content:  "{{ r_size | to_yaml }}"
#        dest:     "{{ r_size_cache_file }}"
#
#  delegate_to: localhost

