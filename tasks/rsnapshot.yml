---

- block:
    - name: rsnapshot | Add rsnapshot.conf to templates list
      set_fact:
        r_data_templates: >
          {{  [ { 'src' : role_path + '/templates/rsnapshot.conf'
                , 'dest': install_path + '/rsnapshot.' + inventory_hostname + '.conf'
                , 'mode': '0755'
                }
              ] + r_data_templates }}

  tags:
    - 'rsnapshot_config'

- block:
    - name: rsnapshot | Add rsync filter files to templates list
      set_fact:
        r_data_templates: >
          {{  [ { 'src' : role_path + '/templates/per_backup-rsync_filter'
                , 'dest': rsync_filters_dir + '/'
                          + inventory_hostname + '-' + item.name + '.rsync-filter'
                , 'r_name': item.name
                }
              ] + r_data_templates }}
      loop: "{{ r_backups }}"

    - name: rsnapshot | Define dictionary used in rsync filter template
      set_fact:
        r_backup_filters: >
          {{ r_backups | items2dict(key_name='name', value_name='rsync_filter') }}

  tags:
    - 'rsnapshot_filters'

- block:
    # FIXME: backup script destination path generation is hardcoded here.
    # And now it's expected to be the same as ssh host name (defined in backup
    # server's ~/.ssh/config) script will try to connect.
    - name: rsnapshot | Add backup scripts to file list
      set_fact:
        r_data_files: >-
          {{  [ { 'src' : item.script
                , 'dest': rsync_filters_dir + '/'
                            + inventory_hostname + '-' + item.script | basename
                , 'mode': '0755'
                }
              ] + r_data_files }}
      loop: "{{ r_backup_scripts }}"

    - name: rsnapshot | Add backup scripts conf files to template list
      set_fact:
        r_data_templates: >-
          {{  [ { 'src' : role_path + '/templates/backup_script-cnf'
                , 'dest': rsync_filters_dir + '/'
                            + inventory_hostname + '-'
                            + item.script | basename | splitext | first + '.cnf'
                , 'mode': '0700'
                , 'r_name':     item.name
                }
              ] + r_data_templates }}
      loop: "{{ r_backup_scripts }}"

    - name: rsnapshot | Define dictionary used in backup script conf template
      set_fact:
        r_backup_script_confs: >
          {{ r_backup_scripts | items2dict(key_name='name', value_name='conf') }}

    - name: HUY
      debug:
        var: r_backup_script_confs
  tags:
    - 'rsnapshot_scripts'

- block:
    - name: rsnapshot | Ensure snapshot root directory exists
      file:
        mode: '0700'
        owner: 'root'
        group: 'root'
        path:  "{{ r_snapshot_root + '/' + inventory_hostname }}"
        state: directory
      tags:
        - 'rsnapshot_config'

    - block:
        - name: rsnapshot | Ensure rsync filters directories exist
          file:
            dest:   "{{ item }}"
            owner:  root
            group:  root
            mode:   0755
            state:  directory
          loop:
            - "{{ rsync_filters_dir }}"
            - "{{ rsync_filters_libdir }}"

        - name: rsnapshot | Copy rsync filters library files
          copy:
            src:    "{{ item }}"
            dest:   "{{ rsync_filters_libdir }}"
            force:  yes
            backup: yes
          with_fileglob:
            - "rsnapshot.d/lib/*"

      tags:
        - 'rsnapshot_filters'

    - name: rsnapshot | Restore or create config files
      include_role:
        name: sgf-restore
        apply:
          tags:
            - always
      vars:
        backup_dir: "{{ backup_root_dir + '/bh-backups' }}"
        default_data_files: "{{ r_data_files }}"
        default_data_templates: "{{ r_data_templates }}"
        default_file_dest: 'huy'
      tags:
        - 'rsnapshot_config'
        - 'rsnapshot_filters'
        - 'rsnapshot_scripts'

  delegate_to: "{{ backup_server }}"

