---

- block:
    - name: count | (local) Stat file count cache file
      stat:
        path: "{{ r_files_count_cache_file }}"
      register: r_files_count_cache_stats

    - name: count | (local) Stat size cache file
      stat:
        path: "{{ r_size_cache_file }}"
      register: r_size_cache_stats

  delegate_to: localhost

- block:
    - name: count | Load file count cache
      include_vars:
        file: "{{ r_files_count_cache_file }}"
        name: r_files_count_cache
      when: r_files_count_cache_stats.stat.exists

    - name: count | Load size cache
      include_vars:
        file: "{{ r_size_cache_file }}"
        name: r_size_cache
      when: r_size_cache_stats.stat.exists

    - name: count | Loaded file count cache
      debug:
        var: r_files_count_cache
    - name: count | Loaded size cache
      debug:
        var: r_size_cache

- block:
    - name: count | (server) Ensure snapshot root directory exists
      file:
        path: "{{ r_snapshot_root }}"
        mode: 0700
        state: directory
      delegate_to: "{{ backup_server }}"

    - name: count | (server) Stat backup points
      stat:
        path: "{{ r_snapshot_root + '/' + item }}"
      loop: >-
        {{  ( ['daily']   | product([0, 1]) | list
            + ['weekly']  | product([0])    | list
            + ['monthly'] | product([0])    | list
            ) | map('join', '.') | list
            + ['.sync']
        }}
      register: r_interval_stats_list
      delegate_to: "{{ backup_server }}"

    - name: count | Rebuild to dict
      set_fact:
        r_interval_stats: >-
          {{ r_interval_stats_list.results | items2dict(key_name='item', value_name='stat') }}

    - name: count | Determine count interval
      set_fact:
        r_count_interval: >-
          {{ 'daily.1' if r_interval_stats['daily.1'].exists
                else 'daily.0' if r_interval_stats['daily.0'].exists
                else '.sync' if r_interval_stats['.sync'].exists
                else ''
          }}

  when: r_count_files

- block:
    # For regular backup points `dst` must be specified. For backup scripts
    # `dst` is assumed to be equal to name.
    - name: count | (server) Count files in backups
      shell: >-
        {{ 'set -o pipefail; /usr/bin/find '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.dst )
                | quote
              + '| wc -l' }}
      args:
        executable: '/bin/bash'
      register: r_files_count_raw
      when: r_files_count_cache[item.name] is not defined or r_files_count_cache[item.name] == 0
      loop: "{{ _backup_points + _backup_scripts }}"
      check_mode: no
      #changed_when: false

    - name: count | (server) Count size of backups
      command: >-
        {{  '/usr/bin/du -s -b '
              + ( r_snapshot_root + '/' + r_count_interval + '/' + item.dst )
                | quote
        }}
      register: r_size_raw
      when: r_size_cache[item.name] is not defined or r_size_cache[item.name] == 0
      loop: "{{ _backup_points + _backup_scripts }}"
      check_mode: no
      #changed_when: false

  delegate_to: "{{ backup_server }}"
  when: r_count_files and r_count_interval != ''

- block:
    - name: count | Rebuild file count to dictionary
      set_fact:
        r_files_count: >-
          {{ r_files_count | combine(
                { item.0.name :
                    item.1.stdout | int
                        if item.1.stdout is defined
                      else r_files_count_cache[item.0.name] | default(0)
                })
          }}
      loop: >-
        {{ ( _backup_points + _backup_scripts ) | zip(r_files_count_raw.results) | list }}

    - name: count | Rebuild size to dictionary
      set_fact:
        r_size: >-
          {{ r_size | combine(
                { item.0.name :
                    item.1.stdout | regex_search('^[0-9]+(?=\t)') | int
                        if item.1.stdout is defined
                      else r_size_cache[item.0.name] | default(0)
                })
          }}
      loop: >-
        {{ ( _backup_points + _backup_scripts ) | zip(r_size_raw.results) | list }}

- block:
    - name: count | (local) Ensure directory for rsnapshot cache exists
      file:
        mode: '0700'
        path:  "{{ r_cache_dir }}"
        state: directory

    - name: count | (local) Save file count locally
      copy:
        content:  "{{ r_files_count | to_yaml }}"
        dest:     "{{ r_files_count_cache_file }}"

    - name: count | (local) Save size locally
      copy:
        content:  "{{ r_size | to_yaml }}"
        dest:     "{{ r_size_cache_file }}"

  delegate_to: localhost
