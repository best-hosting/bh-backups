---

- block:
    - name: define | Define internal r_backups dictionary
      set_fact:
        r_backups2: >-
          {{ r_backups2 + [item | combine(
              { 'full_dst': item.dst + '/'
              , 'alias'   : item.dst | replace('/', '_')
              , 'full_src':
                  ansible_user_id + '@' + inventory_hostname + ':'
                  + ( item.src if item.src == '/' else item.src + '/././' )
              , 'file_count': r_files_count[item.name]
              , 'size'      : r_size[item.name]
              })]
          }}
      loop: "{{ r_backups }}"

    - name: define | Define internal r_backup_scripts dictionary
      set_fact:
        r_backup_scripts2: >-
          {{ r_backup_scripts2 + [item | combine(
              { 'dst'     : item.name
              , 'alias'   : item.name | replace('/', '_')
              , 'user'    : item.user     | default(db_user) + '-' + item.name
              , 'password': item.password | default(db_password)
              , 'install' : rsync_filters_dir + '/'
                              + inventory_hostname + '-' + item.name
                              + item.script | splitext | last
              , 'file_count': r_files_count[item.name]
              , 'size'      : r_size[item.name]
              })]
          }}
      loop: "{{ r_backup_scripts }}"

    - name: define | Backup points
      debug:
        var: r_backups2
    - name: define | Backup scripts
      debug:
        var: r_backup_scripts2

    - name: define | Define MySQL scripts dictionary
      set_fact:
        r_backup_scripts_mysql: >-
          {{ r_backup_scripts_mysql + [ item | combine(
              { 'conf'              : role_path + '/templates/mysql.cnf'
              , 'install_conf'      : item.install | splitext | first + '.cnf'
              })]
          }}
      when: item.script == role_path + '/files/mysql.sh'
      loop: "{{ r_backup_scripts2 }}"

    - name: define | Define PostgreSQL scripts dictionary
      set_fact:
        r_backup_scripts_pgsql: >-
          {{ r_backup_scripts_pgsql + [ item | combine(
              { 'conf'              : role_path + '/templates/pgsql.cnf'
              , 'install_conf'      : item.install | splitext | first + '.cnf'
              , 'passfile'          : role_path + '/templates/pgsql.pgpass'
              , 'install_passfile'  : item.install | splitext | first + '.pgpass'
              })]
          }}
      when: item.script == role_path + '/files/pgsql.sh'
      loop: "{{ r_backup_scripts2 }}"

    - name: define | MySQL backup scripts
      debug:
        var: r_backup_scripts_mysql
    - name: define | PostgreSQL backup scripts
      debug:
        var: r_backup_scripts_pgsql

